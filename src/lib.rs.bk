#![no_std]
#![feature(lang_items)]

extern crate nrf51_hardware;

#[lang = "start"]
fn lang_start(main: *const u8, _argc: isize, _argv: *const *const u8) -> isize {
    unsafe { core::mem::transmute::<_, fn()>(main)() };

    0
}

#[lang = "panic_fmt"]
#[no_mangle]
pub extern "C" fn panic_fmt(details: ::core::fmt::Arguments, file: &'static str, line: u32) -> ! {
    print!("application panicked at '");
    let _ = serial::SERIAL.write_fmt(details);
    println!("', {}:{}", file, line);
    loop {
    }
}

#[lang = "eh_personality"]
extern "C" fn eh_personality() {}

#[no_mangle]
pub extern "C" fn _exit() { panic!("Embedded applications cannot exit, entering infinite loop"); }

#[no_mangle]
pub extern "C" fn _kill() { panic!("Embedded applications cannot exit, entering infinite loop"); }

#[no_mangle]
pub extern "C" fn _getpid() { unimplemented!(); }
use core::fmt;
use pins;
use svd;

#[macro_export]
macro_rules! print {
    ( $ dst : expr , $ ( $ arg : tt ) * ) => (
::core::fmt::Fmt::write_fmt($ dst,  format_args ! ( $ ( $ arg ) * ) ) )
}

#[macro_export]
macro_rules! println {
    ($dst:expr, $fmt:expr) => (
        print!($dst, concat!($fmt, "\n"))
    );
    ($dst:expr, $fmt:expr, $($arg:tt)*) => (
        print!($dst, concat!($fmt, "\n"), $($arg)*)
    );
}
